### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AboutArticle {
  content: String!
  icon: String!
  id: ID!
  label: String!
  sectionId: ID!
}

input AboutArticleInput {
  content: String
  icon: String
  id: ID
  label: String
  sectionId: ID
}

type AboutArticleResponse implements Response {
  article: AboutArticle
  success: Boolean
}

type AboutPage implements PageInterface {
  id: ID!
  name: String!
  sections: [AboutSection!]!
  summary: String
  title: String
  userId: ID!
}

input AboutPageInput {
  summary: String
  title: String
}

type AboutSection {
  articles: [AboutArticle!]!
  id: ID!
  name: String!
}

input AboutSectionInput {
  id: ID
  name: String
}

type AboutSectionResponse implements Response {
  section: AboutSection
  success: Boolean
}

input AddGroupSkillInput {
  groups: [ID!]!
  label: String!
  score: Int!
}

type DeleteUserResponse implements Response {
  deletedCount: Int
  success: Boolean
}

type Education {
  campus: String!
  course: String!
  duration: String!
  endDate: String!
  gpa: String!
  id: ID!
  institute: String!
  level: String!
  startDate: String!
}

input EducationInput {
  campus: String!
  course: String!
  duration: String!
  endDate: String!
  gpa: String!
  institute: String!
  level: String!
  startDate: String!
}

type EducationPage implements PageInterface {
  id: ID!
  list: [Education!]!
  name: String!
  summary: String
  title: String
  userId: ID!
}

type EducationResponse implements Response {
  education: Education
  success: Boolean
}

type Experience implements PageInterface {
  id: ID!
  name: String!
  projects: [Project]!
  summary: String
  title: String
  userId: ID!
  works: [Work]!
}

type Login {
  accessToken: String!
  expiresAt: Int!
  refreshToken: String
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse implements Response {
  login: Login
  success: Boolean
}

type Mutation {
  addEducation(educationAttributes: EducationInput!): Response
  addOrUpdateAboutArticle(aboutArticle: AboutArticleInput!, sectionId: ID!): AboutArticleResponse
  addOrUpdateAboutSection(aboutSection: AboutSectionInput!): AboutSectionResponse
  addProject(projectAttributes: ProjectInput!): Response
  addWork(workAttributes: WorkInput!): Response
  createGroupSkill(skill: AddGroupSkillInput!): SkillResponse
  createOrUpdatePage(pageAttributes: PageInput!, pageName: String!): Response
  createSkillGroup(group: SkillGroupInput!): SkillGroupResponse
  createUser(user: UserInput): Response
  login(credentials: LoginInput!): Response!
  logout: ResponseType!
  refereshToken: Response!
  updateEducation(educationAttributes: UpdateEducationInput!, educationId: ID!): Response
  updateProject(projectAttributes: UpdateProjectInput!, projectId: ID!): Response
  updateSkill(skill: UpdateGroupSkillInput!, skillId: ID!): SkillResponse
  updateSkillGroup(group: SkillGroupInput!, groupId: ID!): SkillGroupResponse
  updateUser(updateAttributes: UpdateUserInput!): Response
  updateWork(workAttributes: UpdateWorkInput!, workId: ID!): Response
}

type Page implements PageInterface {
  id: ID!
  name: String!
  summary: String
  title: String
  userId: ID!
}

input PageInput {
  name: String!
  summary: String
  title: String
}

interface PageInterface {
  id: ID!
  name: String!
  summary: String
  title: String
  userId: ID!
}

type PageResponse implements Response {
  page: Page
  success: Boolean
}

type Project {
  deployed: String!
  desc: String!
  github: String!
  id: ID!
  images: [String!]!
  label: String
  skills: [String!]!
}

input ProjectInput {
  deployed: String!
  desc: String!
  github: String!
  images: [String!]!
  label: String
  skills: [String!]!
}

type ProjectResponse implements Response {
  project: Project
  success: Boolean
}

type Query {
  page(pageName: String!, userId: ID!): PageInterface
  user(emailOrId: ID): User
  users(search: String): [User]!
}

interface Response {
  success: Boolean
}

type ResponseType implements Response {
  success: Boolean
}

type SimpleUser {
  about: String!
  address: String!
  email: String!
  facebook: String!
  github: String!
  id: ID!
  linkedin: String!
  name: String!
  phone: String!
  picture: String!
  resume: String!
}

type Skill {
  groups: [SkillGroup!]!
  id: ID!
  label: String!
  score: Int!
  userId: String!
}

type SkillGroup {
  id: ID!
  name: String!
  skills: [Skill!]!
}

input SkillGroupInput {
  name: String!
}

type SkillGroupResponse implements Response {
  group: SkillGroup
  success: Boolean
}

type SkillResponse implements Response {
  skill: Skill
  success: Boolean
}

type Skills implements PageInterface {
  groups: [SkillGroup!]!
  id: ID!
  name: String!
  summary: String
  title: String
  userId: ID!
}

type Summaries {
  about: String
  education: String
  projects: String
  resume: String
  skills: String
  work: String
}

input SummariesInput {
  about: String
  education: String
  projects: String
  resume: String
  skills: String
  work: String
}

input UpdateEducationInput {
  campus: String
  course: String
  duration: String
  endDate: String
  gpa: String
  institute: String
  level: String
  startDate: String
}

input UpdateGroupSkillInput {
  groups: [ID!]!
  label: String!
  score: Int!
}

input UpdateProjectInput {
  deployed: String
  desc: String
  github: String
  images: [String!]
  label: String
  skills: [String!]
}

input UpdateUserInput {
  about: String
  address: String
  confirmPassword: String
  email: String
  facebook: String
  github: String
  linkedin: String
  name: String
  password: String
  phone: String
  picture: String
  resume: String
}

input UpdateWorkInput {
  address: String
  company: String
  duration: String
  duties: [String!]
  icon: String
  role: String
  type: String
}

type User {
  about: String
  address: String
  email: String!
  facebook: String
  github: String
  id: ID!
  linkedin: String
  name: String!
  phone: String
  picture: String
  resume: String
}

input UserInput {
  about: String! = ""
  address: String! = ""
  confirmPassword: String!
  email: String!
  facebook: String! = ""
  github: String! = ""
  linkedin: String! = ""
  name: String!
  password: String!
  phone: String! = ""
  picture: String! = ""
  resume: String! = ""
}

type UserResponse implements Response {
  success: Boolean
  user: User
}

type Work {
  address: String!
  company: String!
  duration: String!
  duties: [String!]!
  icon: String
  id: ID!
  role: String!
  type: String!
}

input WorkInput {
  address: String!
  company: String!
  duration: String!
  duties: [String!]!
  icon: String
  role: String!
  type: String!
}

type WorkResponse implements Response {
  success: Boolean
  work: Work
}